// For more attempts at recursion try the first 5 problems in Project Euler (https://projecteuler.net/archives)

// Problem 1
// Multiples of 3 or 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

// Iteration
function findMults3And5BelowNThenSum(n) {
  const arr = [];
  for (let i = 3; i < n; i++) {
    if (i % 3 == 0 || i % 5 == 0) {
      arr.push(i);
    }
  }
  console.log(arr);
  return arr.reduce((a, b) => a + b);
}
console.log("***ITERATION LOGS***");
console.log(findMults3And5BelowNThenSum(10));
console.log(findMults3And5BelowNThenSum(100));
console.log(findMults3And5BelowNThenSum(1000));

// Recursion
function recFindMults3And5BelowNThenSum(n, arr = []) {
  // Base case: if n is less than 3, return the sum of the array
  if (n < 3) {
    return arr.reduce((a, b) => a + b, 0);
  }

  // Check if n - 1 is a multiple of 3 or 5
  if ((n - 1) % 3 === 0 || (n - 1) % 5 === 0) {
    arr.push(n - 1); // Add n - 1 to the array if it's a multiple
  }

  // Recursive call
  return recFindMults3And5BelowNThenSum(n - 1, arr);
}

// Example usage
console.log("***RECURSIVE LOGS***");
console.log(recFindMults3And5BelowNThenSum(10)); // Output: 23
console.log(recFindMults3And5BelowNThenSum(100));
console.log(recFindMults3And5BelowNThenSum(1000));

// Problem 2
// Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

// Recursion
function recEvenFibsOnly(arr = [1, 2], evenArr = [2]) {
  const maxNum = 4000000; // Set your limit here

  // Calculate the next Fibonacci number
  const fibNum = arr[arr.length - 1] + arr[arr.length - 2];

  // Check if the next Fibonacci number exceeds the limit
  if (fibNum >= maxNum) {
    // When exiting the recursion, sum and return the even Fibonacci numbers
    return evenArr.reduce((a, b) => a + b, 0);
  }

  // Add the new Fibonacci number to the array
  arr.push(fibNum);

  // If it's even, add it to the evenArr
  if (fibNum % 2 === 0) {
    evenArr.push(fibNum);
  }

  console.log(evenArr);
  
  // Continue the recursion
  return recEvenFibsOnly(arr, evenArr);
}

// Call the function and log the result
console.log(`The sum of the even Fibonacci numbers is: ${recEvenFibsOnly()}`);


// Problem 3
// Largest Prime Factor
// The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143?

function findLargestPrimeFactorIterate(n) { //MESSY CODE
  function isPrime(num) {
    if (num <= 1) return false; // 0 and 1 are not prime numbers
    if (num <= 3) return true; // 2 and 3 are prime numbers

    // Check for even numbers and multiples of 3
    if (num % 2 === 0 || num % 3 === 0) return false;

    // Check for factors from 5 to the square root of num
    for (let i = 5; i * i <= num; i += 6) {
      if (num % i === 0 || num % (i + 2) === 0) {
        return false;
      }
    }

    return true; // num is prime
  }
  let arr = [];
  let sqrt = Math.floor(Math.sqrt(n));
  let divisor = sqrt;
  console.log(sqrt);
  

  if (isPrime(n)) {
    return n
  } else {

  while (divisor > 1) {
    if (isPrime(divisor) && n % divisor == 0) {
      arr.push(divisor);
    }
    divisor--;
  }

  let newArr = [...arr];

  for (let i = 0; i < newArr.length; i++) {
    const factor = newArr[i];
    const result = n / factor;

    if (n % factor === 0 && isPrime(result)) {
      arr.push(result);
    }
  }
  console.log(arr);
     arr.sort((a, b) => {
      if (a > b) {
        return 1
      }else {return -1}
    })

  }  
  return Math.max(...arr)
}

function isPrime(num) {
  if (num <= 1) return false;
  if (num <= 3) return true;
  if (num % 2 === 0 || num % 3 === 0) return false;
  for (let i = 5; i * i <= num; i += 6) {
    if (num % i === 0 || num % (i + 2) === 0) return false;
  }
  return true;
}

function findLargestPrimeFactor(n, divisor = 2, largest = 1) {
  // Base case: if n is less than or equal to 1, return the largest prime found
  if (n <= 1) return largest;

  // If the current divisor is a factor of n
  if (n % divisor === 0) {
    // Check if the divisor is prime and update largest
    if (isPrime(divisor)) {
      largest = divisor;
    }
    // Recursively call with the reduced n
    return findLargestPrimeFactor(n / divisor, divisor, largest);
  } else {
    // If not a factor, move to the next possible divisor
    return findLargestPrimeFactor(n, divisor + 1, largest);
  }
}

console.log(`The largest prime of -1 = ${findLargestPrimeFactor(-1)}`); 
console.log(`The largest prime of 0 = ${findLargestPrimeFactor(0)}`);
console.log(`The largest prime of 1 = ${findLargestPrimeFactor(1)}`); 
console.log(`The largest prime of 2 = ${findLargestPrimeFactor(2)}`);
console.log(`The largest prime of 3 = ${findLargestPrimeFactor(3)}`);
console.log(`The largest prime of 4 = ${findLargestPrimeFactor(4)}`);
console.log(`The largest prime of 9 = ${findLargestPrimeFactor(9)}`); // 3
console.log(`The largest prime of 12 = ${findLargestPrimeFactor(12)}`); // 2, 3, 4, 6, 2^2 x 3, with 3 being the largest prime factor
console.log(`The largest prime of 24 = ${findLargestPrimeFactor(24)}`);
console.log(`The largest prime of 36 = ${findLargestPrimeFactor(36)}`); // 3 is the largest prime factor
console.log(`The largest prime of 71 = ${findLargestPrimeFactor(71)}`);
console.log(`The largest prime of 77 = ${findLargestPrimeFactor(77)}`); // 7, 11, with 11 as the largest prime factor
console.log(`The largest prime of 100 = ${findLargestPrimeFactor(100)}`);
console.log(`The largest prime of 619 = ${findLargestPrimeFactor(619)}`)
console.log(`The largest prime of 12999 = ${findLargestPrimeFactor(12999)}`);
console.log(`The largest prime of 13195 = ${findLargestPrimeFactor(13195)}`); // 29 is the largest prime
//console.log(`The largest prime of 600851475143 = ${findLargestPrimeFactor(600851475143)}`); // 6857 BLOWS CALL STACK UP

function findLargestPrimeFactorIterate(n) {
  //SOOOOOOOOOOOOOOOOOOOOOOOOOOOO MESSY (AND UGLY) CODE BUT IT WORKS WITHOUT STACK OVERFLOWS FOR LARGE Ns
  function isPrime(num) {
    if (num <= 1) return false; // 0 and 1 are not prime numbers
    if (num <= 3) return true; // 2 and 3 are prime numbers

    // Check for even numbers and multiples of 3
    if (num % 2 === 0 || num % 3 === 0) return false;

    // Check for factors from 5 to the square root of num
    for (let i = 5; i * i <= num; i += 6) {
      if (num % i === 0 || num % (i + 2) === 0) {
        return false;
      }
    }

    return true; // num is prime
  }
  let arr = [];
  let sqrt = Math.floor(Math.sqrt(n));
  let divisor = sqrt;
  // console.log(sqrt);

  if (isPrime(n)) {
    return n;
  } else if (n <= 1) {
    return "No largest prime numbers exist for this number."
  } else {
    while (divisor > 1) {
      if (isPrime(divisor) && n % divisor == 0) {
        arr.push(divisor);
      }
      divisor--;
    }

    let newArr = [...arr];

    for (let i = 0; i < newArr.length; i++) {
      const factor = newArr[i];
      const result = n / factor;

      if (n % factor === 0 && isPrime(result)) {
        arr.push(result);
      }
    }
    // console.log(arr);
    arr.sort((a, b) => {
      if (a > b) {
        return 1;
      } else {
        return -1;
      }
    });
  }
  return Math.max(...arr);
}

console.log(`The largest prime of -1 = ${findLargestPrimeFactorIterate(-1)}`); 
console.log(`The largest prime of 0 = ${findLargestPrimeFactorIterate(0)}`);
console.log(`The largest prime of 1 = ${findLargestPrimeFactorIterate(1)}`); 
console.log(`The largest prime of 2 = ${findLargestPrimeFactorIterate(2)}`);
console.log(`The largest prime of 3 = ${findLargestPrimeFactorIterate(3)}`);
console.log(`The largest prime of 4 = ${findLargestPrimeFactorIterate(4)}`);
console.log(`The largest prime of 9 = ${findLargestPrimeFactorIterate(9)}`); // 3
console.log(`The largest prime of 12 = ${findLargestPrimeFactorIterate(12)}`); // 2, 3, 4, 6, 2^2 x 3, with 3 being the largest prime factor
console.log(`The largest prime of 24 = ${findLargestPrimeFactorIterate(24)}`);
console.log(`The largest prime of 36 = ${findLargestPrimeFactorIterate(36)}`); // 3 is the largest prime factor
console.log(`The largest prime of 71 = ${findLargestPrimeFactorIterate(71)}`);
console.log(`The largest prime of 77 = ${findLargestPrimeFactorIterate(77)}`); // 7, 11, with 11 as the largest prime factor
console.log(`The largest prime of 100 = ${findLargestPrimeFactorIterate(100)}`);
console.log(`The largest prime of 619 = ${findLargestPrimeFactorIterate(619)}`)
console.log(`The largest prime of 12999 = ${findLargestPrimeFactorIterate(12999)}`);
console.log(`The largest prime of 13195 = ${findLargestPrimeFactorIterate(13195)}`); // 29 is the largest prime
console.log(`The largest prime of 600851475143 = ${findLargestPrimeFactorIterate(600851475143)}`);
console.log(
  `The largest prime of 51564684684624 = ${findLargestPrimeFactorIterate(
    51564684684624
  )}`
);